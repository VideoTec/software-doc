git ls-tree only works with git refs, e.g. ls-tree HEAD.

Try git ls-files. You probably want the -s and/or -m flags.
git ls-files -s will list the files in the index (i.e. files that have been staged)


-c
--cached
Show cached files in the output (default)

-d
--deleted
Show deleted files in the output

-m
--modified
Show modified files in the output

-o
--others
Show other (i.e. untracked) files in the output

-i
--ignored
Show only ignored files in the output. When showing files in the index, print only those matched by an exclude pattern. When showing "other" files, show only those matched by an exclude pattern.

-s
--stage
Show staged contents' object name, mode bits and stage number in the output.

--directory
If a whole directory is classified as "other", show just its name (with a trailing slash) and not its whole contents.

--no-empty-directory
Do not list empty directories. Has no effect without --directory.

-u
--unmerged
Show unmerged files in the output (forces --stage)

-k
--killed
Show files on the filesystem that need to be removed due to file/directory conflicts for checkout-index to succeed.

-z
\0 line termination on output.

-x <pattern>
--exclude=<pattern>
Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information.

-X <file>
--exclude-from=<file>
Read exclude patterns from <file>; 1 per line.

--exclude-per-directory=<file>
Read additional exclude patterns that apply only to the directory and its subdirectories in <file>.

--exclude-standard
Add the standard Git exclusions: .git/info/exclude, .gitignore in each directory, and the userâ€™s global exclusion file.

--error-unmatch
If any <file> does not appear in the index, treat this as an error (return 1).

--with-tree=<tree-ish>
When using --error-unmatch to expand the user supplied <file> (i.e. path pattern) arguments to paths, pretend that paths which were removed in the index since the named <tree-ish> are still present. Using this option with -s or -u options does not make any sense.

-t
This feature is semi-deprecated. For scripting purpose, git-status(1) --porcelain and git-diff-files(1) --name-status are almost always superior alternatives, and users should look at git-status(1) --short or git-diff(1) --name-status for more user-friendly alternatives.

This option identifies the file status with the following tags (followed by a space) at the start of each line:

H
cached

S
skip-worktree

M
unmerged

R
removed/deleted

C
modified/changed

K
to be killed

?
other

-v
Similar to -t, but use lowercase letters for files that are marked as assume unchanged (see git-update-index(1)).

--full-name
When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.

--abbrev[=<n>]
Instead of showing the full 40-byte hexadecimal object lines, show only a partial prefix. Non default number of digits can be specified with --abbrev=<n>.

--debug
After each line that describes a file, add more data about its cache entry. This is intended to show as much information as possible for manual inspection; the exact format may change at any time.

--
Do not interpret any more arguments as options.

<file>
Files to show. If no files are given all files which match the other specified criteria are shown.