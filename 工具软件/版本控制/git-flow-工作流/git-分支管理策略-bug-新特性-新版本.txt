http://www.ruanyifeng.com/blog/2012/07/git.html

Vincent Driessen提出了一个分支管理的策略，
我觉得非常值得借鉴。它可以使得版本库的演进保持简洁，
主干清晰，各个分支各司其职、井井有条。
理论上，这些策略对所有的版本管理系统都适用，Git只是用来举例而已

-------------------------------------
主分支Master
-------------------------------------
首先，
代码库应该有一个、且仅有一个主分支。
所有提供给用户使用的正式版本，都在这个主分支上发布

-------------------------------------
开发分支Develop
-------------------------------------
主分支只用来分布重大版本，日常开发应该在另一条分支上完成。
我们把开发用的分支，叫做Develop。

这个分支可以用来生成代码的最新隔夜版本（nightly）。
如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）

# 切换到Master分支
git checkout master
# 对Develop分支进行合并
git merge --no-ff develop

命令的--no-ff参数是什么意思。
默认情况下，Git执行"快进式合并"（fast-farward merge），
会直接将Master分支指向Develop分支
使用--no-ff参数后，会执行正常合并，
在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法

-------------------------------------
临时性分支
-------------------------------------
前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。
其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
　　* 功能（feature）分支
　　* 预发布（release）分支
　　* 修补bug（fixbug）分支
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。